# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Run tests and publish report

on:
  workflow_dispatch: # Trigger the workflow manually
    inputs:
      tags: # Input parameter for test scenario tags
        description: "Test scenario tags"
        required: true
        default: "smoke"

env:
  RESULTS_DIR: allure_results

jobs:
  build:

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash # Set the shell for the job


    steps:
    - uses: actions/checkout@v4
    - uses: browser-actions/setup-chrome@v1
    - run: chrome --version
    - uses: browser-actions/setup-firefox@v1
    - run: firefox --version
    - name: Set up Python 
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest --alluredir allure_results --env="headlesschrome, headlessfirefox"
        allure serve allure_results

    - name: Get Allure history # Step to retrieve Allure history
      uses: actions/checkout@v4
      if: always() # Execute even if previous steps fail
      continue-on-error: true # Continue execution even if the step fails
      with:
        ref: my_gh_pages # Specify the branch to retrieve Allure history from
        path: my_gh_pages # Set the destination path for Allure history

    - name: Allure report action # Step to generate Allure report
      uses: simple-elf/allure-report-action@master
      if: always() # Execute even if previous steps fail
      with:
        allure_results: allure_results # Specify the directory containing Allure results
        allure_history: allure-history # Specify the directory to store Allure history
        keep_reports: 5 # Specify the number of previous reports to keep

    - name: Deploy Allure report to GitHub Pages # Step to deploy Allure report to GitHub Pages
      if: always() # Execute even if previous steps fail
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }} # Provide the GitHub token for authentication
        publish_branch: my_gh_pages # Specify the branch to publish the report to
        publish_dir: allure-history # Specify the directory containing the report



